/* tslint:disable */
/* eslint-disable */
/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AjarnBodyType
 */
export interface AjarnBodyType {
    /**
     * 
     * @type {string}
     * @memberof AjarnBodyType
     */
    'abbreviation': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnBodyType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AjarnBodyTypeList
 */
export interface AjarnBodyTypeList {
    /**
     * 
     * @type {Array<AjarnBodyTypeListDataInner>}
     * @memberof AjarnBodyTypeList
     */
    'data': Array<AjarnBodyTypeListDataInner>;
}
/**
 * 
 * @export
 * @interface AjarnBodyTypeListDataInner
 */
export interface AjarnBodyTypeListDataInner {
    /**
     * 
     * @type {string}
     * @memberof AjarnBodyTypeListDataInner
     */
    'abbreviation': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnBodyTypeListDataInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AjarnResponseAbbre
 */
export interface AjarnResponseAbbre {
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'thname': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'enname': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'education': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'interested': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'room': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'website': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'imgSrc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AjarnResponseAbbre
     */
    'refUrl'?: string;
}
/**
 * 
 * @export
 * @interface AjarnType
 */
export interface AjarnType {
    /**
     * 
     * @type {string}
     * @memberof AjarnType
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnType
     */
    'abbreviation': string;
    /**
     * 
     * @type {string}
     * @memberof AjarnType
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetAjarnAbbreByAbbre404Response
 */
export interface GetAjarnAbbreByAbbre404Response {
    /**
     * 
     * @type {string}
     * @memberof GetAjarnAbbreByAbbre404Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PostAjarnRequestRequest
 */
export interface PostAjarnRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof PostAjarnRequestRequest
     */
    'abbreviation': string;
    /**
     * 
     * @type {string}
     * @memberof PostAjarnRequestRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostAjarnRequestRequest
     */
    'department': string;
}

/**
 * AjarnApi - axios parameter creator
 * @export
 */
export const AjarnApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete one Ajarn
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAjarnById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAjarnById', 'id', id)
            const localVarPath = `/ajarn/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all ajarn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAjarn: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ajarn/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get one Ajarn
         * @param {string} abbre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAjarnAbbreByAbbre: async (abbre: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'abbre' is not null or undefined
            assertParamExists('getAjarnAbbreByAbbre', 'abbre', abbre)
            const localVarPath = `/ajarn/abbre/{abbre}`
                .replace(`{${"abbre"}}`, encodeURIComponent(String(abbre)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get one Ajarn
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAjarnById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAjarnById', 'id', id)
            const localVarPath = `/ajarn/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create one Ajarn
         * @param {AjarnBodyType} ajarnBodyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAjarn: async (ajarnBodyType: AjarnBodyType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ajarnBodyType' is not null or undefined
            assertParamExists('postAjarn', 'ajarnBodyType', ajarnBodyType)
            const localVarPath = `/ajarn/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ajarnBodyType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create multiple Ajarns
         * @param {AjarnBodyTypeList} ajarnBodyTypeList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAjarnMany: async (ajarnBodyTypeList: AjarnBodyTypeList, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ajarnBodyTypeList' is not null or undefined
            assertParamExists('postAjarnMany', 'ajarnBodyTypeList', ajarnBodyTypeList)
            const localVarPath = `/ajarn/many`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ajarnBodyTypeList, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostAjarnRequestRequest} postAjarnRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAjarnRequest: async (postAjarnRequestRequest: PostAjarnRequestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postAjarnRequestRequest' is not null or undefined
            assertParamExists('postAjarnRequest', 'postAjarnRequestRequest', postAjarnRequestRequest)
            const localVarPath = `/ajarn/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postAjarnRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit one Ajarn
         * @param {string} id 
         * @param {AjarnBodyType} ajarnBodyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAjarnById: async (id: string, ajarnBodyType: AjarnBodyType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAjarnById', 'id', id)
            // verify required parameter 'ajarnBodyType' is not null or undefined
            assertParamExists('putAjarnById', 'ajarnBodyType', ajarnBodyType)
            const localVarPath = `/ajarn/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ajarnBodyType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AjarnApi - functional programming interface
 * @export
 */
export const AjarnApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AjarnApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete one Ajarn
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAjarnById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAjarnById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.deleteAjarnById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all ajarn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAjarn(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAjarn(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.getAjarn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get one Ajarn
         * @param {string} abbre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAjarnAbbreByAbbre(abbre: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AjarnResponseAbbre>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAjarnAbbreByAbbre(abbre, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.getAjarnAbbreByAbbre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get one Ajarn
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAjarnById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAjarnById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.getAjarnById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create one Ajarn
         * @param {AjarnBodyType} ajarnBodyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAjarn(ajarnBodyType: AjarnBodyType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAjarn(ajarnBodyType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.postAjarn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create multiple Ajarns
         * @param {AjarnBodyTypeList} ajarnBodyTypeList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAjarnMany(ajarnBodyTypeList: AjarnBodyTypeList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAjarnMany(ajarnBodyTypeList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.postAjarnMany']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostAjarnRequestRequest} postAjarnRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAjarnRequest(postAjarnRequestRequest: PostAjarnRequestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAjarnRequest(postAjarnRequestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.postAjarnRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit one Ajarn
         * @param {string} id 
         * @param {AjarnBodyType} ajarnBodyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAjarnById(id: string, ajarnBodyType: AjarnBodyType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAjarnById(id, ajarnBodyType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AjarnApi.putAjarnById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AjarnApi - factory interface
 * @export
 */
export const AjarnApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AjarnApiFp(configuration)
    return {
        /**
         * Delete one Ajarn
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAjarnById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAjarnById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all ajarn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAjarn(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAjarn(options).then((request) => request(axios, basePath));
        },
        /**
         * Get one Ajarn
         * @param {string} abbre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAjarnAbbreByAbbre(abbre: string, options?: RawAxiosRequestConfig): AxiosPromise<AjarnResponseAbbre> {
            return localVarFp.getAjarnAbbreByAbbre(abbre, options).then((request) => request(axios, basePath));
        },
        /**
         * Get one Ajarn
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAjarnById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAjarnById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create one Ajarn
         * @param {AjarnBodyType} ajarnBodyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAjarn(ajarnBodyType: AjarnBodyType, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAjarn(ajarnBodyType, options).then((request) => request(axios, basePath));
        },
        /**
         * Create multiple Ajarns
         * @param {AjarnBodyTypeList} ajarnBodyTypeList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAjarnMany(ajarnBodyTypeList: AjarnBodyTypeList, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAjarnMany(ajarnBodyTypeList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostAjarnRequestRequest} postAjarnRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAjarnRequest(postAjarnRequestRequest: PostAjarnRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postAjarnRequest(postAjarnRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit one Ajarn
         * @param {string} id 
         * @param {AjarnBodyType} ajarnBodyType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAjarnById(id: string, ajarnBodyType: AjarnBodyType, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putAjarnById(id, ajarnBodyType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AjarnApi - object-oriented interface
 * @export
 * @class AjarnApi
 * @extends {BaseAPI}
 */
export class AjarnApi extends BaseAPI {
    /**
     * Delete one Ajarn
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public deleteAjarnById(id: string, options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).deleteAjarnById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all ajarn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public getAjarn(options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).getAjarn(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get one Ajarn
     * @param {string} abbre 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public getAjarnAbbreByAbbre(abbre: string, options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).getAjarnAbbreByAbbre(abbre, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get one Ajarn
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public getAjarnById(id: string, options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).getAjarnById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create one Ajarn
     * @param {AjarnBodyType} ajarnBodyType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public postAjarn(ajarnBodyType: AjarnBodyType, options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).postAjarn(ajarnBodyType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create multiple Ajarns
     * @param {AjarnBodyTypeList} ajarnBodyTypeList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public postAjarnMany(ajarnBodyTypeList: AjarnBodyTypeList, options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).postAjarnMany(ajarnBodyTypeList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostAjarnRequestRequest} postAjarnRequestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public postAjarnRequest(postAjarnRequestRequest: PostAjarnRequestRequest, options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).postAjarnRequest(postAjarnRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit one Ajarn
     * @param {string} id 
     * @param {AjarnBodyType} ajarnBodyType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AjarnApi
     */
    public putAjarnById(id: string, ajarnBodyType: AjarnBodyType, options?: RawAxiosRequestConfig) {
        return AjarnApiFp(this.configuration).putAjarnById(id, ajarnBodyType, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndex: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndex(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndex(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndex(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getIndex(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndex(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndex(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScrapeApi - axios parameter creator
 * @export
 */
export const ScrapeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get one Scrape
         * @param {string} abbre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapeByAbbre: async (abbre: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'abbre' is not null or undefined
            assertParamExists('getScrapeByAbbre', 'abbre', abbre)
            const localVarPath = `/scrape/{abbre}`
                .replace(`{${"abbre"}}`, encodeURIComponent(String(abbre)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScrapeApi - functional programming interface
 * @export
 */
export const ScrapeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScrapeApiAxiosParamCreator(configuration)
    return {
        /**
         * Get one Scrape
         * @param {string} abbre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScrapeByAbbre(abbre: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScrapeByAbbre(abbre, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScrapeApi.getScrapeByAbbre']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScrapeApi - factory interface
 * @export
 */
export const ScrapeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScrapeApiFp(configuration)
    return {
        /**
         * Get one Scrape
         * @param {string} abbre 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScrapeByAbbre(abbre: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getScrapeByAbbre(abbre, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScrapeApi - object-oriented interface
 * @export
 * @class ScrapeApi
 * @extends {BaseAPI}
 */
export class ScrapeApi extends BaseAPI {
    /**
     * Get one Scrape
     * @param {string} abbre 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScrapeApi
     */
    public getScrapeByAbbre(abbre: string, options?: RawAxiosRequestConfig) {
        return ScrapeApiFp(this.configuration).getScrapeByAbbre(abbre, options).then((request) => request(this.axios, this.basePath));
    }
}



